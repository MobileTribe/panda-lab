{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "https://mobiletribe.github.io/panda-lab/public/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Android configuration",
    "content": "Android configuration . Configure Keystore . Create a signing-android.properties file in .config and fulfill with your company signing data. . storeFile=/path/to/your/keystore/keystore.jks keyAlias=my_alias keyAliasPassword=XXXXXXXXXX storePassword=XXXXXXXXX . Create a firebase Android app . In the firebase settings, create a new Android application with com.leroymerlin.pandalab as package name and download the google-services.json. . . Set the path to the google-services.json in .config/config.json with the key googlePlayServicesPath. . { &quot;googlePlayServicesPath&quot;:&quot;.config/google-services.json&quot; } .",
    "url": "https://mobiletribe.github.io/panda-lab/public/android-config/",
    "relUrl": "/android-config/"
  }
  ,"2": {
    "title": "Configure",
    "content": "Configure . . Firebase . PandaLab was developed around the firebase solution. In order to deploy your lab, you will have to configure a Firebase project and retrieve configuration for the different frontends. . .",
    "url": "https://mobiletribe.github.io/panda-lab/public/configure",
    "relUrl": "/configure"
  }
  ,"3": {
    "title": "Create project",
    "content": "Firebase project . Create a project . Open the Firebase console and click on the button CREATE NEW PROJECT. . . Define the name of your project. . . Download and install the Firebase CLI . Configure your credentials. . firebase login . Change firebase plan . In order to work properly, PandaLab needs a paid plan to enable all the platform’s features. We recommend a Blaze formula to keep it free until you get a huge traffic on PandaLab. . . Clone and setup Pandalab . Clone the Pandalab project . git clone https://github.com/MobileTribe/panda-lab.git cd panda-lab . Then define the Firebase project on which you will work : . firebase use [PROJECT NAME] .",
    "url": "https://mobiletribe.github.io/panda-lab/public/create-project/",
    "relUrl": "/create-project/"
  }
  ,"4": {
    "title": "First test",
    "content": "Create your first test . The PandaLab gradle plugin helps you create test tasks to run on the lab. It is possible to create different gradle tasks to deal with very specific needs. . Configuration . Add the gradle plugin classpath to the build.gradle file at the root of the project: . pandalab_version = . buildscript { repositories{ jcenter() } dependencies { classpath &quot;com.leroymerlin.pandalab:gradle-plugin:$pandalab_version&quot; } } . Then modify the build.gradle file of your application module to configure the PandaLab plugin : . apply plugin: &#39;com.leroymerlin.pandalab&#39; pandalab { serviceAccountFile = file(&quot;path/to/your/firebase-adminsdk.json&quot;) appName = &quot;APP NAME&quot; apiUrl = &quot;YOUR FIREBASE REST API URL&quot; } . To know how to recover the file please consult the following link : firebase documentation . Write test . UI tests . Check the official documentation to build your Espresso/UI automation tests. . Take screenshot . If you want screenshot in your test report you have to use Spoon . compile { implementation &quot;com.squareup.spoon:spoon-client:1.7.1&quot; } . Spoon.screenshot(activity, &quot;initial_state&quot;); . Create a task . pandalab extension allows you to define various parameters in order to launch your instrumentation tests on your phone fleet. You must define the variant name to test, then you can define the devices ids or groups on which the tests must run. . pandalab { // ... tests { test1 { variantName = &quot;debug&quot; //required devices = [&quot;345678765433456&quot;, &quot;09876543456789098765&quot;] //default [] groups = [&quot;pandalab&quot;] //default [] devicesCount = 1 //default 0 timeoutInSecond = 1800 //default 3 hours waitForResult = false //default true enable = true//default true } test2 { variantName = &quot;debug&quot; //... } } } . variantName: name of the variant to retrieve the apk that will be launched for the tests | devices: the identifiers of the devices on which the tests will be run. The identifiers can be found in the web interface. | groups: the name of the device groups on which the tests will be run. | devicesCount: the number of device to use. 0 will use all the selected devices. | timeoutInSecond: timeout in second. The default value is 900 seconds. | waitForResult: wait for the result on all tests launched. Very useful for fail a CI job. The default value is true. | enable: Enable a task. The default value is true. | . The different tests declared in tests generate gradle tasks with the name of the test with the suffix PandaLabTest. . In the example above, it generates the tasks : test1PandaLabTest and test2PandaLabTest . Run one task . To launch the previously created task test1, launch the command line : . ./gradlew app:test1PandaLabTest . Run all tasks . ./gradlew runPandaLabTests . Upload a version . If you just want to upload a new version to the web interface for a latter use, you can run . ./gradlew uploadToPandaLab . That way you will be able to create a test from this version directly in the web interface. .",
    "url": "https://mobiletribe.github.io/panda-lab/public/create-test",
    "relUrl": "/create-test"
  }
  ,"5": {
    "title": "Home",
    "content": "Panda Lab . PandaLab is an open source solution which helps you to manager fleet of devices and to run automatic tests on them. . Get started now View it on GitHub . . About . A lot of powerful testing solutions exist out there. In most of the case, these solutions allow you to test quite efficiently your app but you also need to do some concession. . PandaLab was started in order to solve some of the limitations we had with cloud solutions. For us, it was important to be able to test on specific hardware. We also needed our devices to be on private networks to access test environments. And finally, we didn’t wanted to worry about pricing or restriction on the amount of tests we could run, to allow us an easier CI integration. . These are all the issues that PandaLab is trying to solve. This solution is fully open source and is just waiting for you to help it grow. . . Features . Decentralized agent . You can have multiple device labs in your teams and share all the available devices, no matter where they are connected. . . Jobs queue . PandaLab deals with concurrent jobs on a pool of devices. . . Test report . PandaLab provides simple but efficient test reports and charts. . Android instrumentation test support . For now, PandaLab only supports android instrumentation test (Espresso/UI Automator) but we are looking to add Appium test support. . Manage devices . The lab agents take care of your devices and deal with device status (available, enrolled, booked, remote connection …). . And more soon . Access roadmap . . Partners . . . License . PandaLab is distributed by an Apache License, Version 2.0. . Contributing . When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in this guide. . Thank you to the contributors PandaLab . .",
    "url": "https://mobiletribe.github.io/panda-lab/public/",
    "relUrl": "/"
  }
  ,"6": {
    "title": "Identity providers",
    "content": "Identity providers . Firebase Authentication allows you to connect to multiple providers : . google.com (OAuth Google) | password (Email) | facebook.com (OAuth Facebook) | github.com (OAuth Github) | twitter.com (OAuth twitter) | . . . Configure the list of providers . The different providers are configurable in the file.config/config.json : . { // ... &quot;authProviders&quot;: [ &quot;google.com&quot;, &quot;password&quot;, &quot;facebook.com&quot;, &quot;github.com&quot;, &quot;twitter.com&quot; ] } . The authProviders property is an array with the different providers. You are free to use those you need. . Don’t forget to configure each of them in the Firebase console. . . The configuration of the different providers in firebase is available on the official documentation . Role . PandaLab use different user role : . guest | user | admin | . Security . The first user created in the application will be automatically admin. Then the following will be identified as a guest until the administrator grants rights greater than this one. . .",
    "url": "https://mobiletribe.github.io/panda-lab/public/identity-providers/",
    "relUrl": "/identity-providers/"
  }
  ,"7": {
    "title": "Install",
    "content": "Install . Make sure you have followed all the steps in the configure section before trying to deploy. . Configure project . . Deploy . Run the following command in the root folder to deploy the project to firebase . npm run deploy . Update . To update the project you just have to pull and deploy. . git pull npm run deploy . Install Agent . To install an agent, go to the admin section of your deployed website and download the corresponding agent client. .",
    "url": "https://mobiletribe.github.io/panda-lab/public/install",
    "relUrl": "/install"
  }
  ,"8": {
    "title": "Roadmap",
    "content": "Roadmap . //TODO .",
    "url": "https://mobiletribe.github.io/panda-lab/public/roadmap",
    "relUrl": "/roadmap"
  }
  ,"9": {
    "title": "Agent",
    "content": "Setup an agent . An agent is a computer in charge of managing devices. Your instance of PandaLab can have as many agent as you want. Each of them will deal with his connected devices. . Setup environment . An agent need adb in order to control Android devices. Please refer to the Android developer documentation to install adb. . Make sure adb is in your path by running : . adb --version . Install client . Agent client is available in the agents section of your PandaLab web interface. Download the client of the corresponding OS. . . Once install, you need to login the first time with an admin account. The agent will create his own technical account and logout from yours. . Then you will be able to manage your connected devices in the Agent section of the interface. . . Update client . The agent client still doesn’t have auto update feature. You will have to repeat the install part each time you deploy a new version. .",
    "url": "https://mobiletribe.github.io/panda-lab/public/setup-agent",
    "relUrl": "/setup-agent"
  }
  ,"10": {
    "title": "Web configuration",
    "content": "Web configuration . Create a web app . In the firebase settings create a new web application. . . Retrieve informations from the configured web application. . . Configure firebase.json . Modify or create the file .config/config.json located at the root of the project to add the previous information : . { &quot;apiKey&quot;: &quot;AIzaSyB-LYCs9okzeQFQbhi3XXXXXXXXXXX&quot;, &quot;authDomain&quot;: &quot;panda-lab-lm.firebaseapp.com&quot;, &quot;databaseUrl&quot;: &quot;https://panda-lab-lm.firebaseio.com&quot;, &quot;projectId&quot;: &quot;panda-lab-lm&quot;, &quot;storageBucket&quot;: &quot;panda-lab-lm.appspot.com&quot;, &quot;messagingSenderId&quot;: &quot;248XXXXXXX&quot;, &quot;appId&quot;: &quot;1:2433243323:web:deXXXXXXXX&quot;, } . Service account . Create a service account and download the json file from the firebase settings or the google cloud console. To create this file, please follow the documentation : Firebase Admin SDK. . Put the file in the .config folder and add serviceAccountPath to the .config/config.json file to set the service account json file path. . { &quot;serviceAccountPath&quot;: &quot;.config/firebase-adminsdk.json&quot; } . Api endpoint . Add apiUrl in the .config/config.json file. The rest api endpoint url can be found in the functions part of the firebase console if you already deployed them. If it’s your first deployment, you can create it with this pattern https://{datacenter}-{projectName}.cloudfunctions.net . { &quot;apiUrl&quot;: &quot;https://us-central1-panda-lab-lm.cloudfunctions.net&quot; } .",
    "url": "https://mobiletribe.github.io/panda-lab/public/web-config/",
    "relUrl": "/web-config/"
  }
  
}