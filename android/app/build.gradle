apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.leroymerlin.delivery'

def buildTime = System.currentTimeMillis()

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.leroymerlin.pandalab"
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode Integer.parseInt(versionId)
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        all {
            buildConfigField("long", "BUILD_TIME", "${buildTime}L")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}



delivery {
    signingProperties {
        all {
            propertiesFile = file("../../.config/signing-android.properties")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.firebase:firebase-core:17.2.1'
    implementation 'com.google.firebase:firebase-messaging:20.0.0'
    implementation 'com.google.firebase:firebase-auth:19.1.0'
    implementation 'com.google.firebase:firebase-firestore:21.2.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.13'
    implementation 'com.github.FrangSierra:RxFirebase:1.5.6'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'com.google.dagger:dagger-android:2.24'
    implementation 'com.google.dagger:dagger-android-support:2.24'
    implementation 'androidx.multidex:multidex:2.0.1'

    // if you use the support libraries
    kapt 'com.google.dagger:dagger-android-processor:2.20'
    kapt 'com.google.dagger:dagger-compiler:2.24'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
}

def configFile = new File("../.config/config.json")
def slurper = new JsonSlurper()
def configData = slurper.parse(configFile)
def playServicesSource = new File("../" + configData.googlePlayServicesPath).newDataInputStream()
def playServicesDestination = new File("./app/google-services.json").newDataOutputStream()
playServicesDestination << playServicesSource
playServicesSource.close()
playServicesDestination.close()


apply plugin: 'com.google.gms.google-services'

import com.google.auth.oauth2.GoogleCredentials
import com.google.firebase.cloud.StorageClient
import com.google.cloud.storage.BlobInfo
import com.google.firebase.FirebaseApp
import com.google.firebase.FirebaseOptions
import groovy.json.JsonSlurper
import com.android.build.gradle.api.ApkVariantOutput

project.afterEvaluate {

    def debugVariant = android.applicationVariants.find { variant -> variant.name == "debug" && variant.outputs.first() instanceof ApkVariantOutput }

    task('uploadAgentApk', dependsOn: ["assembleDebug"]) {

    }.doLast {

        def serviceAccountFile = project.rootProject.file('../.config/firebase-adminsdk.json')
        FileInputStream serviceAccount =
                new FileInputStream(serviceAccountFile)

        def account = new JsonSlurper().parse(serviceAccountFile)

        def pid = account['project_id']?.toString() ?: ""
        def bucketUrl = "${pid}.appspot.com"
        def credentials = GoogleCredentials.fromStream(serviceAccount)
        FirebaseOptions options = new FirebaseOptions.Builder()
                .setCredentials(credentials)
                .setProjectId(pid)
                .setStorageBucket(bucketUrl)
                .build()

        try {
            FirebaseApp.initializeApp(options)
        } catch (e) {
            project.logger.debug("FirebaseApp already initialized", e)
        }

        project.logger.warn("uploaded file : ${debugVariant.outputs.first().outputFile}")


        def bucket = StorageClient.getInstance().bucket()
        BlobInfo blobInfo = BlobInfo.newBuilder(bucket, "config/android-agent.apk")
                .setContentType("application/vnd.android.package-archive")
                .setMetadata(["appName": "PandaLab", "buildTime": buildTime, "buildType": "debug", "flavor": "debug", "type": "debug"])
                .build()


        bucket.getStorage()
                .create(blobInfo, debugVariant.outputs.first().outputFile.readBytes())
    }
}
